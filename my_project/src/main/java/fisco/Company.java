package fisco;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Company extends Contract {
    public static String BINARY = "60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b62000303565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260098152602001807f745f636f6d70616e7900000000000000000000000000000000000000000000008152506020018481038352600c8152602001807f636f6d70616e795f6e616d6500000000000000000000000000000000000000008152506020018481038252603e8152602001807f6163636f756e742c20707269766174655f6b65792c207075626c69635f6b657981526020017f2c20636f6d70616e795f616464726573732c2061737365745f76616c756500008152506040019350505050602060405180830381600087803b1580156200017157600080fd5b505af115801562000186573d6000803e3d6000fd5b505050506040513d60208110156200019d57600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845260058152602001807f745f62696c000000000000000000000000000000000000000000000000000000815250602001848103835260088152602001807f6372656469746f720000000000000000000000000000000000000000000000008152506020018481038252600e8152602001807f646562746f722c20616d6f756e740000000000000000000000000000000000008152506020019350505050602060405180830381600087803b158015620002c257600080fd5b505af1158015620002d7573d6000803e3d6000fd5b505050506040513d6020811015620002ee57600080fd5b81019080805190602001909291905050505050565b615aa980620003136000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305f4612e146100b4578063223af00e1461013b57806324f55e29146101ae5780632f0533991461022b5780633a7d280c146102f85780635dfc43d61461044d57806397669994146105605780639d0dd35a146106ff578063b02e047a146107cc578063c45cd99a14610899578063e4890a801461095c575b600080fd5b3480156100c057600080fd5b50610125600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610a29565b6040518082815260200191505060405180910390f35b34801561014757600080fd5b506101ac600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610f5f565b005b3480156101ba57600080fd5b50610215600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061140e565b6040518082815260200191505060405180910390f35b34801561023757600080fd5b506102e2600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506116bc565b6040518082815260200191505060405180910390f35b34801561030457600080fd5b5061035f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611be0565b604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156103a957808201518184015260208101905061038e565b50505050905090810190601f1680156103d65780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561040f5780820151818401526020810190506103f4565b50505050905090810190601f16801561043c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561045957600080fd5b5061054a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061231f565b6040518082815260200191505060405180910390f35b34801561056c57600080fd5b506106e9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612d32565b6040518082815260200191505060405180910390f35b34801561070b57600080fd5b506107b6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506135eb565b6040518082815260200191505060405180910390f35b3480156107d857600080fd5b50610883600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050613e43565b6040518082815260200191505060405180910390f35b3480156108a557600080fd5b50610946600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506148e0565b6040518082815260200191505060405180910390f35b34801561096857600080fd5b50610a13600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050614e48565b6040518082815260200191505060405180910390f35b6000806000610a3661589f565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39868473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ab957600080fd5b505af1158015610acd573d6000803e3d6000fd5b505050506040513d6020811015610ae357600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610b91578082015181840152602081019050610b76565b50505050905090810190601f168015610bbe5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050506040513d6020811015610c0857600080fd5b81019080805190602001909291905050509050838173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b505050506040513d6020811015610cb657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f61737365745f76616c7565000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610d6657600080fd5b505af1158015610d7a573d6000803e3d6000fd5b505050506040513d6020811015610d9057600080fd5b81019080805190602001909291905050501215610dcf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9250610f57565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610e3f57600080fd5b505af1158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f61737365745f76616c7565000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b810190808051906020019092919050505092505b505092915050565b600080610f6a61589f565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b505050506040513d6020811015610ffa57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f636f6d70616e795f6e616d650000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156110cd5780820151818401526020810190506110b2565b50505050905090810190601f1680156110fa5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156111da57600080fd5b505af11580156111ee573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663bf2b70a185838573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050506040513d602081101561129e57600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561137e578082015181840152602081019050611363565b50505050905090810190601f1680156113ab5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156113cc57600080fd5b505af11580156113e0573d6000803e3d6000fd5b505050506040513d60208110156113f657600080fd5b81019080805190602001909291905050505050505050565b600080600061141b61589f565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39858473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d60208110156114c857600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561157657808201518184015260208101905061155b565b50505050905090810190601f1680156115a35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b505050506040513d60208110156115ed57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561166457600080fd5b505af1158015611678573d6000803e3d6000fd5b505050506040513d602081101561168e57600080fd5b8101908080519060200190929190505050600014156116b057600092506116b5565b600192505b5050919050565b60008060008060008060006116d08961140e565b14156116fe577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9550611bd4565b61170661598e565b9450600093508473ffffffffffffffffffffffffffffffffffffffff1663e8434e398a8773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050506040513d60208110156117b757600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561186557808201518184015260208101905061184a565b50505050905090810190601f1680156118925780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b505050506040513d60208110156118dc57600080fd5b81019080805190602001909291905050509250600091505b8273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561195857600080fd5b505af115801561196c573d6000803e3d6000fd5b505050506040513d602081101561198257600080fd5b8101908080519060200190929190505050821215611b2f57838373ffffffffffffffffffffffffffffffffffffffff1663846719e0846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611a0a57600080fd5b505af1158015611a1e573d6000803e3d6000fd5b505050506040513d6020811015611a3457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611ae457600080fd5b505af1158015611af8573d6000803e3d6000fd5b505050506040513d6020811015611b0e57600080fd5b810190808051906020019092919050505001935081806001019250506118f4565b83871315611b4257600184019550611bd4565b611b4c8888610a29565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811415611b9e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550611bd4565b611baa88888303610f5f565b611bb5896000610a29565b9050611bc389888301610f5f565b611bce888a89613e43565b50600095505b50505050509392505050565b6000606080600080611bf061589f565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39878473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c7357600080fd5b505af1158015611c87573d6000803e3d6000fd5b505050506040513d6020811015611c9d57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611d4b578082015181840152602081019050611d30565b50505050905090810190601f168015611d785780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611d9857600080fd5b505af1158015611dac573d6000803e3d6000fd5b505050506040513d6020811015611dc257600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b505050506040513d6020811015611e6f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f61737365745f76616c7565000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611f1f57600080fd5b505af1158015611f33573d6000803e3d6000fd5b505050506040513d6020811015611f4957600080fd5b81019080805190602001909291905050508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611fca57600080fd5b505af1158015611fde573d6000803e3d6000fd5b505050506040513d6020811015611ff457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600f8152602001807f636f6d70616e795f616464726573730000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156120a457600080fd5b505af11580156120b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156120e257600080fd5b8101908080516401000000008111156120fa57600080fd5b8281019050602081018481111561211057600080fd5b815185600182028301116401000000008211171561212d57600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156121a557600080fd5b505af11580156121b9573d6000803e3d6000fd5b505050506040513d60208110156121cf57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f707269766174655f6b6579000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561227f57600080fd5b505af1158015612293573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156122bd57600080fd5b8101908080516401000000008111156122d557600080fd5b828101905060208101848111156122eb57600080fd5b815185600182028301116401000000008211171561230857600080fd5b505092919050505094509450945050509193909250565b6000806000806000806123318a61140e565b1480612345575060006123438861140e565b145b80612358575060006123568961140e565b145b15612385577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9450612d26565b6123938888886000036135eb565b935060008412156123a657839450612d26565b6123ae61598e565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d602081101561243e57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156125115780820151818401526020810190506124f6565b50505050905090810190601f16801561253e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561255e57600080fd5b505af1158015612572573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561263657808201518184015260208101905061261b565b50505050905090810190601f1680156126635780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561268357600080fd5b505af1158015612697573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748786036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561274557600080fd5b505af1158015612759573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156127c157600080fd5b505af11580156127d5573d6000803e3d6000fd5b505050506040513d60208110156127eb57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156128be5780820151818401526020810190506128a3565b50505050905090810190601f1680156128eb5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561290b57600080fd5b505af115801561291f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156129e35780820151818401526020810190506129c8565b50505050905090810190601f168015612a105780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612a3057600080fd5b505af1158015612a44573d6000803e3d6000fd5b5050505060008685031415612b9c578273ffffffffffffffffffffffffffffffffffffffff166328bb211789836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612b0e578082015181840152602081019050612af3565b50505050905090810190601f168015612b3b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612b5b57600080fd5b505af1158015612b6f573d6000803e3d6000fd5b505050506040513d6020811015612b8557600080fd5b810190808051906020019092919050505050612d15565b8273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18984846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015612c8a578082015181840152602081019050612c6f565b50505050905090810190601f168015612cb75780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612cd857600080fd5b505af1158015612cec573d6000803e3d6000fd5b505050506040513d6020811015612d0257600080fd5b8101908080519060200190929190505050505b612d20898888613e43565b50600094505b50505050949350505050565b6000806000806001612d438b61140e565b1415612d71577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93506135de565b612d7961589f565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612ddf57600080fd5b505af1158015612df3573d6000803e3d6000fd5b505050506040513d6020811015612e0957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f636f6d70616e795f6e616d650000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612edc578082015181840152602081019050612ec1565b50505050905090810190601f168015612f095780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612f2957600080fd5b505af1158015612f3d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600f8152602001807f636f6d70616e795f616464726573730000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613001578082015181840152602081019050612fe6565b50505050905090810190601f16801561302e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561304e57600080fd5b505af1158015613062573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f61737365745f76616c756500000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561310e57600080fd5b505af1158015613122573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156131e65780820151818401526020810190506131cb565b50505050905090810190601f1680156132135780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561323357600080fd5b505af1158015613247573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f707269766174655f6b6579000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561330b5780820151818401526020810190506132f0565b50505050905090810190601f1680156133385780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f7075626c69635f6b657900000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613430578082015181840152602081019050613415565b50505050905090810190601f16801561345d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561347d57600080fd5b505af1158015613491573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015613550578082015181840152602081019050613535565b50505050905090810190601f16801561357d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561359d57600080fd5b505af11580156135b1573d6000803e3d6000fd5b505050506040513d60208110156135c757600080fd5b810190808051906020019092919050505090508093505b5050509695505050505050565b6000806000806135f961598e565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561365f57600080fd5b505af1158015613673573d6000803e3d6000fd5b505050506040513d602081101561368957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561375c578082015181840152602081019050613741565b50505050905090810190601f1680156137895780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156137a957600080fd5b505af11580156137bd573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613881578082015181840152602081019050613866565b50505050905090810190601f1680156138ae5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156138ce57600080fd5b505af11580156138e2573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3988846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156139a1578082015181840152602081019050613986565b50505050905090810190601f1680156139ce5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156139ee57600080fd5b505af1158015613a02573d6000803e3d6000fd5b505050506040513d6020811015613a1857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613a8f57600080fd5b505af1158015613aa3573d6000803e3d6000fd5b505050506040513d6020811015613ab957600080fd5b810190808051906020019092919050505060001415613afa577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350613e39565b6000858273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613b6d57600080fd5b505af1158015613b81573d6000803e3d6000fd5b505050506040513d6020811015613b9757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015613c4757600080fd5b505af1158015613c5b573d6000803e3d6000fd5b505050506040513d6020811015613c7157600080fd5b8101908080519060200190929190505050011215613cb1577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350613e39565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613d2157600080fd5b505af1158015613d35573d6000803e3d6000fd5b505050506040513d6020811015613d4b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f616d6f756e740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015613dfb57600080fd5b505af1158015613e0f573d6000803e3d6000fd5b505050506040513d6020811015613e2557600080fd5b810190808051906020019092919050505093505b5050509392505050565b600080600080600080613e558861140e565b1480613e6957506000613e678961140e565b145b15613e96577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd94506148d5565b613ea18888886135eb565b9350613eab61598e565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613f1157600080fd5b505af1158015613f25573d6000803e3d6000fd5b505050506040513d6020811015613f3b57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561400e578082015181840152602081019050613ff3565b50505050905090810190601f16801561403b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561405b57600080fd5b505af115801561406f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015614133578082015181840152602081019050614118565b50505050905090810190601f1680156141605780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561418057600080fd5b505af1158015614194573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156141fc57600080fd5b505af1158015614210573d6000803e3d6000fd5b505050506040513d602081101561422657600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156142f95780820151818401526020810190506142de565b50505050905090810190601f1680156143265780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561434657600080fd5b505af115801561435a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561441e578082015181840152602081019050614403565b50505050905090810190601f16801561444b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561446b57600080fd5b505af115801561447f573d6000803e3d6000fd5b505050506000841215614695578173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561453457600080fd5b505af1158015614548573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3689846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156146075780820151818401526020810190506145ec565b50505050905090810190601f1680156146345780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561465457600080fd5b505af1158015614668573d6000803e3d6000fd5b505050506040513d602081101561467e57600080fd5b8101908080519060200190929190505050506148d0565b8173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748588016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561473f57600080fd5b505af1158015614753573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18984846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561484557808201518184015260208101905061482a565b50505050905090810190601f1680156148725780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561489357600080fd5b505af11580156148a7573d6000803e3d6000fd5b505050506040513d60208110156148bd57600080fd5b8101908080519060200190929190505050505b600094505b505050509392505050565b600080600080600092506148f261589f565b91508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39878473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561497557600080fd5b505af1158015614989573d6000803e3d6000fd5b505050506040513d602081101561499f57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015614a4d578082015181840152602081019050614a32565b50505050905090810190601f168015614a7a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015614a9a57600080fd5b505af1158015614aae573d6000803e3d6000fd5b505050506040513d6020811015614ac457600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614b3b57600080fd5b505af1158015614b4f573d6000803e3d6000fd5b505050506040513d6020811015614b6557600080fd5b810190808051906020019092919050505060011415614e3757846040518082805190602001908083835b602083101515614bb45780518252602082019150602081019050602083039250614b8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015614c5557600080fd5b505af1158015614c69573d6000803e3d6000fd5b505050506040513d6020811015614c7f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f707269766174655f6b6579000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015614d2f57600080fd5b505af1158015614d43573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015614d6d57600080fd5b810190808051640100000000811115614d8557600080fd5b82810190506020810184811115614d9b57600080fd5b8151856001820283011164010000000082111715614db857600080fd5b50509291905050506040518082805190602001908083835b602083101515614df55780518252602082019150602081019050602083039250614dd0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515614e3257600192505b614e3c565b600292505b82935050505092915050565b600080600080600080614e5a8861140e565b1480614e6e57506000614e6c8961140e565b145b15614e9b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9450615894565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614ec68888610a29565b1415614ed55760019450615894565b614ee38888886000036135eb565b93506000841215614ef657839450615894565b614efe61598e565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614f6457600080fd5b505af1158015614f78573d6000803e3d6000fd5b505050506040513d6020811015614f8e57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015615061578082015181840152602081019050615046565b50505050905090810190601f16801561508e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156150ae57600080fd5b505af11580156150c2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561518657808201518184015260208101905061516b565b50505050905090810190601f1680156151b35780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156151d357600080fd5b505af11580156151e7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748786036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561529557600080fd5b505af11580156152a9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561531157600080fd5b505af1158015615325573d6000803e3d6000fd5b505050506040513d602081101561533b57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6372656469746f72000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561540e5780820151818401526020810190506153f3565b50505050905090810190601f16801561543b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561545b57600080fd5b505af115801561546f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f646562746f720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015615533578082015181840152602081019050615518565b50505050905090810190601f1680156155605780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561558057600080fd5b505af1158015615594573d6000803e3d6000fd5b50505050600086850314156156ec578273ffffffffffffffffffffffffffffffffffffffff166328bb211789836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561565e578082015181840152602081019050615643565b50505050905090810190601f16801561568b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156156ab57600080fd5b505af11580156156bf573d6000803e3d6000fd5b505050506040513d60208110156156d557600080fd5b810190808051906020019092919050505050615865565b8273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18984846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156157da5780820151818401526020810190506157bf565b50505050905090810190601f1680156158075780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561582857600080fd5b505af115801561583c573d6000803e3d6000fd5b505050506040513d602081101561585257600080fd5b8101908080519060200190929190505050505b61587a87876158748a8a610a29565b03610f5f565b61588f88876158898b8a610a29565b01610f5f565b600094505b505050509392505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f745f636f6d70616e790000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561594957600080fd5b505af115801561595d573d6000803e3d6000fd5b505050506040513d602081101561597357600080fd5b81019080805190602001909291905050509050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f745f62696c000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015615a3857600080fd5b505af1158015615a4c573d6000803e3d6000fd5b505050506040513d6020811015615a6257600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820b937e51a0b67abcf64d78957b2071ad0569e92ad44271dc756ad6112147be2530029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"checkAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"updateAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"}],\"name\":\"hasCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"},{\"name\":\"bank_name\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"finance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_creditor\",\"type\":\"string\"},{\"name\":\"creditor\",\"type\":\"string\"},{\"name\":\"debtor\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"transferBil\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"},{\"name\":\"company_address\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"},{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"private_key\",\"type\":\"string\"},{\"name\":\"public_key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creditor\",\"type\":\"string\"},{\"name\":\"debtor\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"hasBil\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creditor\",\"type\":\"string\"},{\"name\":\"debtor\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"addBil\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company_name\",\"type\":\"string\"},{\"name\":\"private_key\",\"type\":\"string\"}],\"name\":\"canLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creditor\",\"type\":\"string\"},{\"name\":\"debtor\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"repayBil\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_CHECKASSET = "checkAsset";

    public static final String FUNC_UPDATEASSET = "updateAsset";

    public static final String FUNC_HASCOMPANY = "hasCompany";

    public static final String FUNC_FINANCE = "finance";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_TRANSFERBIL = "transferBil";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_HASBIL = "hasBil";

    public static final String FUNC_ADDBIL = "addBil";

    public static final String FUNC_CANLOGIN = "canLogin";

    public static final String FUNC_REPAYBIL = "repayBil";

    @Deprecated
    protected Company(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Company(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Company(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Company(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> checkAsset(String company_name, BigInteger amount) {
        final Function function = new Function(
                FUNC_CHECKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void checkAsset(String company_name, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHECKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String checkAssetSeq(String company_name, BigInteger amount) {
        final Function function = new Function(
                FUNC_CHECKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getCheckAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> updateAsset(String company_name, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_UPDATEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateAsset(String company_name, BigInteger asset_value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateAssetSeq(String company_name, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_UPDATEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getUpdateAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> hasCompany(String company_name) {
        final Function function = new Function(
                FUNC_HASCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void hasCompany(String company_name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_HASCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String hasCompanySeq(String company_name) {
        final Function function = new Function(
                FUNC_HASCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getHasCompanyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASCOMPANY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getHasCompanyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASCOMPANY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> finance(String company_name, String bank_name, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bank_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void finance(String company_name, String bank_name, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FINANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bank_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String financeSeq(String company_name, String bank_name, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bank_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getFinanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getFinanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FINANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> login(String company_name) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void login(String company_name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String loginSeq(String company_name) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, String, String> getLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> transferBil(String new_creditor, String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(new_creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferBil(String new_creditor, String creditor, String debtor, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(new_creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferBilSeq(String new_creditor, String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(new_creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, BigInteger> getTransferBilInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferBilOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> register(String company_name, String company_address, BigInteger asset_value, String account, String private_key, String public_key) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_address), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(public_key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register(String company_name, String company_address, BigInteger asset_value, String account, String private_key, String public_key, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_address), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(public_key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerSeq(String company_name, String company_address, BigInteger asset_value, String account, String private_key, String public_key) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_address), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(asset_value), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(public_key)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<String, String, BigInteger, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple6<String, String, BigInteger, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> hasBil(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_HASBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void hasBil(String creditor, String debtor, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_HASBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String hasBilSeq(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_HASBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getHasBilInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getHasBilOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> addBil(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addBil(String creditor, String debtor, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addBilSeq(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getAddBilInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getAddBilOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> canLogin(String company_name, String private_key) {
        final Function function = new Function(
                FUNC_CANLOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void canLogin(String company_name, String private_key, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANLOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String canLoginSeq(String company_name, String private_key) {
        final Function function = new Function(
                FUNC_CANLOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(company_name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(private_key)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getCanLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANLOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getCanLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANLOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> repayBil(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_REPAYBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void repayBil(String creditor, String debtor, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REPAYBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String repayBilSeq(String creditor, String debtor, BigInteger amount) {
        final Function function = new Function(
                FUNC_REPAYBIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(creditor), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(debtor), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getRepayBilInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPAYBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getRepayBilOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REPAYBIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    @Deprecated
    public static Company load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Company(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Company load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Company(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Company load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Company(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Company load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Company(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Company> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Company.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Company> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Company.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Company> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Company.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Company> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Company.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
